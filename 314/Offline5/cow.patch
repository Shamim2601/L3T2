diff --git a/Makefile b/Makefile
index 39a99d7..5d008a7 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testcow\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..1d5173e 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,10 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             getFreePagesCount(void);  
+void            inc_ref(void *);
+void            dec_ref(void *);
+int             get_ref(void *);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -173,6 +177,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             calloc(pagetable_t, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..270da39 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -23,10 +23,21 @@ struct {
   struct run *freelist;
 } kmem;
 
+struct {
+  struct spinlock lock;
+  int count[(PGROUNDUP(PHYSTOP) - KERNBASE)/PGSIZE];
+} refcount;
+
 void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
+  initlock(&refcount.lock, "refcount");
+  //reset count array before freerange
+  for(int i=0;i<(PGROUNDUP(PHYSTOP) - KERNBASE)/PGSIZE;i++)
+  {
+    refcount.count[i] = 1;
+  }
   freerange(end, (void*)PHYSTOP);
 }
 
@@ -51,6 +62,17 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
+  // if(get_ref(pa)<=0)
+  // {
+  //   printf("krefget(pa) returned %d\n", krefget(pa));
+  //   panic("kfree_decr");
+  // }
+    
+
+  dec_ref(pa);
+  if(get_ref(pa) > 0)
+    return;
+
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
 
@@ -77,6 +99,60 @@ kalloc(void)
   release(&kmem.lock);
 
   if(r)
+  {
     memset((char*)r, 5, PGSIZE); // fill with junk
+    acquire(&refcount.lock);
+    refcount.count[PA2IDX((void *)r)] = 1;  //need to define PA2IDX(r)
+    release(&refcount.lock);
+  }
   return (void*)r;
 }
+
+void
+inc_ref(void *pa)
+{
+  acquire(&refcount.lock);
+  refcount.count[PA2IDX(pa)]++;
+  release(&refcount.lock);
+}
+
+void
+dec_ref(void *pa)
+{
+  acquire(&refcount.lock);
+  refcount.count[PA2IDX(pa)]--;
+  release(&refcount.lock);
+}
+
+int
+get_ref(void *pa)
+{
+  int count;
+  acquire(&refcount.lock);
+  //printf("idx = %d\n", PA2IDX(pa));
+  count = refcount.count[PA2IDX(pa)];
+  release(&refcount.lock);
+  return count;
+}
+
+//syscall for count of free pages in table
+int
+getFreePagesCount(void)
+{
+  if(&kmem.lock)  
+  {
+    acquire(&kmem.lock);
+  }
+  struct run * myfree = kmem.freelist;
+  int freepages = 0;
+  while(myfree)
+  {
+    freepages++;
+    myfree = myfree->next;
+  }
+  if(&kmem.lock)
+  {
+    release(&kmem.lock);
+  }
+  return freepages;
+}
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..7ea9be2 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,10 +343,16 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_COW (1L << 8) //for cow implementatin
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
 
+// The macro uses the PT_SHIFT constant to shift the physical address to the right by the number of bits in a page table entry (which is 10 bits in RISC-V). 
+// The result is then masked with PT_ENTRIES - 1, where PT_ENTRIES is the number of entries in a page table (which is 512 in RISC-V). 
+// This gives the index of the page table entry corresponding to the physical address.
+#define PA2IDX(pa) (((uint64) (pa) >> 10) & (512 - 1))
+
 #define PTE2PA(pte) (((pte) >> 10) << 12)
 
 #define PTE_FLAGS(pte) ((pte) & 0x3FF)
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..0a838bc 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_getFreePagesCount(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getFreePagesCount]   sys_getFreePagesCount,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..373b9a7 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getFreePagesCount  22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..188614d 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,13 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64
+sys_getFreePagesCount(void)
+{
+  uint64 num_free_pages = 0;
+  num_free_pages = getFreePagesCount();
+
+  return num_free_pages;
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..5918032 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -65,7 +65,13 @@ usertrap(void)
     intr_on();
 
     syscall();
-  } else if((which_dev = devintr()) != 0){
+  }else if(r_scause() == 15){
+    uint64 addr = r_stval(); //va causing page fault
+    if(addr>=MAXVA || (addr<p->trapframe->sp && addr>=(p->trapframe->sp - PGSIZE)))
+      p->killed = 1;
+    if(calloc(p->pagetable, PGROUNDDOWN(addr)) < 0)
+      p->killed = 1;
+  }else if((which_dev = devintr()) != 0){
     // ok
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..8ae588d 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -308,7 +308,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  //char *mem; 
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
@@ -317,13 +317,21 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+
+    if(flags & PTE_W)
+    {
+      flags = (flags|PTE_COW) & (~PTE_W);
+      *pte = (*pte & ~PTE_W) | PTE_COW;
+    }
+
+    // if((mem = kalloc()) == 0) //alloc krtesi na
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){  //just mapping
+      //kfree(mem);
       goto err;
     }
+    inc_ref((void *)pa);
   }
   return 0;
 
@@ -355,6 +363,8 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
+    if(calloc(pagetable, va0) < 0)  //calloc instead of kalloc
+      return -1;
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
@@ -437,3 +447,35 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+int
+calloc(pagetable_t pagetable, uint64 va)  //for cow page allocation
+{
+  if(va>=MAXVA) 
+    return -1;
+  if((va % PGSIZE) != 0)
+    return -1;
+
+  pte_t *pte = walk(pagetable, va, 0);
+  if(pte == 0)
+    return -1;
+  
+  uint64 pa = PTE2PA(*pte);
+  if(pa == 0) 
+    return -1;
+
+  if(*pte & PTE_COW)
+  {
+    uint flags = PTE_FLAGS(*pte);
+    flags = (flags & ~PTE_COW) | PTE_W;
+    //new page allocation for cow page
+    char *ka = kalloc();
+    if(ka == 0)
+      return -1;
+    memmove(ka, (char *)pa, PGSIZE);//copy old content
+    uvmunmap(pagetable, PGROUNDUP(va), 1, 1);//free old memmap
+    //clear PTE_COW and set PTE_W kora hoyese
+    mappages(pagetable, va, PGSIZE, (uint64)ka, flags);
+  }
+  return 0;
+}
\ No newline at end of file
diff --git a/user/testcow.c b/user/testcow.c
new file mode 100644
index 0000000..c99a1c9
--- /dev/null
+++ b/user/testcow.c
@@ -0,0 +1,60 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/riscv.h"
+#include "user/user.h"
+#include <stddef.h>
+
+
+int a = 1;
+
+int main(void)
+{
+	int pid = fork();
+	if(pid<0)
+	{
+	 	printf("\nError occured \n");
+		exit(-1);
+	}
+	
+	//now there are two processes... parent and child
+	if(pid>0)  //parent gets pid>0 of child
+	{
+		wait(NULL);  //wait for the child process to finish
+		printf("\nChild process finished...\n");
+		//printf("Current free pages count: %d\n", getFreePagesCount());
+		printf("Parent Process exiting...\n\n");
+		
+	}
+	
+	if(pid==0)   //child get pid=0 of parent
+	{
+		printf("\nFork done. This is child process...\n");
+		printf("Current free pages count: %d\n", getFreePagesCount());
+
+		if(a == 1)
+		{
+			printf("\nJust read variable a; Current free pages count: %d\n", getFreePagesCount());
+			printf("Free pages count did not decrease when we read...\n");
+		}
+
+		a = 3;
+		printf("\nWrite into variable a; Current free pages count: %d\n", getFreePagesCount());
+		printf("Free pages count should decrease when we write into variable a for first time\n");
+
+		a = 4;
+		printf("\nAnother Write into variable a; Current free pages count: %d\n", getFreePagesCount());
+		printf("Free pages count should not decrease when we write into variable a for second time\n");
+		
+		
+		printf("\nUsing up one more page by sbrk.\n");
+		if((uint64)sbrk(PGSIZE) == 0xffffffffffffffff){
+		    printf("sbrk failed");
+		    exit(1);
+  		}
+  		printf("Current free pages count: %d\n", getFreePagesCount());
+		printf("Free pages count should decrease...\n");
+	}
+	
+	exit(0);	
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..024aee4 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getFreePagesCount(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..4e73a77 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("getFreePagesCount");
